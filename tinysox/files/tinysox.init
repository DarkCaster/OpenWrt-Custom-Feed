#!/bin/sh /etc/rc.common

USE_PROCD=1
START=99

tinysox="/usr/sbin/tinysox"
tinysox_cfg="tinysox"

start_service() {
	local uid="$(id -u tinysox 2>/dev/null)"
	local gid="$(id -g tinysox 2>/dev/null)"
	if [ -z "$uid" ] || [ -z "$gid" ]; then
		uid="$(id -u nobody 2>/dev/null)"
		gid="$(id -g nogroup 2>/dev/null)"
	fi
	if [ -z "$uid" ] || [ -z "$gid" ]; then
		echo "Failed to setup unprivileged UID or GID to run tinysox" && exit 1
	fi
	local listen=""
	local port=""
	local dns=""
	local domain=""
	local username=""
	local password=""
	local connect_timeout=""
	local connect_mintime=""
	local buffer_size=""
	local socket_timeout_ms=""
	local linger_timeout=""
	local network_namespace=""
	#instance counter
	local inum="0"
	while [ ! -z "$(uci -q get $tinysox_cfg.@instance[$inum])" ]; do
		#skip disabled sections
		if [ "$(uci -q get $tinysox_cfg.@instance[$inum].enabled)" != "1" ]; then
			inum=$(expr $inum + 1)
			continue
		fi
		#fillup params
		port="$(uci -q get $tinysox_cfg.@instance[$inum].port)"
		if [ -z "$port" ]; then
			echo "port param for config instance $inum is not set or invalid"
			inum=$(expr $inum + 1)
			continue
		fi
		listen="$(uci -q get $tinysox_cfg.@instance[$inum].listen)"
		dns="$(uci -q get $tinysox_cfg.@instance[$inum].dns)"
		domain="$(uci -q get $tinysox_cfg.@instance[$inum].domain)"
		username="$(uci -q get $tinysox_cfg.@instance[$inum].username)"
		password="$(uci -q get $tinysox_cfg.@instance[$inum].password)"
		connect_timeout="$(uci -q get $tinysox_cfg.@instance[$inum].connect_timeout)"
		connect_mintime="$(uci -q get $tinysox_cfg.@instance[$inum].connect_mintime)"
		buffer_size="$(uci -q get $tinysox_cfg.@instance[$inum].buffer_size)"
		socket_timeout_ms="$(uci -q get $tinysox_cfg.@instance[$inum].socket_timeout_ms)"
		linger_timeout="$(uci -q get $tinysox_cfg.@instance[$inum].linger_timeout)"
		network_namespace="$(uci -q get $tinysox_cfg.@instance[$inum].network_namespace)"
		#create service dir
		mkdir -p "/var/run/tinysox$inum/empty"
		chown $uid:$gid "/var/run/tinysox$inum/empty"
		chmod 500 "/var/run/tinysox$inum/empty"
		#define new instance
		procd_open_instance "tinysox$inum"
		procd_set_param command "$tinysox"
		#set params
		procd_append_param command -p "$port"
		procd_append_param command -ru "$uid"
		procd_append_param command -rg "$gid"
		procd_append_param command -cd "/var/run/tinysox$inum/empty"
		[ ! -z "$listen" ] && procd_append_param command -l "$listen"
		[ ! -z "$connect_timeout" ] && procd_append_param command -cmax "$connect_timeout"
		[ ! -z "$connect_mintime" ] && procd_append_param command -cmin "$connect_mintime"
		[ ! -z "$buffer_size" ] && procd_append_param command -bsz "$buffer_size"
		[ ! -z "$socket_timeout_ms" ] && procd_append_param command -st "$socket_timeout_ms"
		[ ! -z "$linger_timeout" ] && procd_append_param command -cf "$linger_timeout"
		[ ! -z "$network_namespace" ] && procd_append_param command -ns "$network_namespace"
		if [ ! -z "$dns" ]; then
			procd_append_param command -dns "$dns"
			[ ! -z "$domain" ] && procd_append_param command -src "$domain"
		fi
		if [ ! -z "$username" ] && [ ! -z "$password" ]; then
			procd_append_param command -usr "$username"
			procd_append_param command -pwd "$password"
		fi
		procd_set_param respawn ${respawn_threshold:-60} ${respawn_timeout:-1} ${respawn_retry:-5}
		procd_set_param stdout 1
		procd_set_param stderr 1
		procd_close_instance
		#try next instance
		inum=$(expr $inum + 1)
	done
}
